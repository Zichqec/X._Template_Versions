AiTalk
{
	if STRLEN(offscreen) == 0
	{
		if CHAIN.IDName == ""
		{
			lastTalk = RandomTalk
		}
		else
		{
			lastTalk = ChainTalk
		}
		lastTalk
	}
	else
	{ 
		OffscreenTalk(ANY(offscreen))
	}
}

//nonoverlap means that all possible dialogue candidates will be chosen at least once before any dialogues are repeated. Note that sets of brackets (with or without an if statement) count as a single dialogue candidate! That's why I've used the Pool function instead, it'll output everything in the if statement and the probabilities and nonoverlap will be handled properly.
RandomTalk : nonoverlap
{
	"\0\s[0]All your random dialogue goes here!\e"
	"\0\s[0]Here's a chain!\e:chain=achain"
	"\0\s[0]Today is %(nowday)!\e"
	"\0\s[0]Tomorrow will be %(nowday('next'))!\e"
	"\0\s[0]In two days it'll be %(nowday(weekday + 2))!\e"
	"\0\s[0]Yesterday was %(nowday('last'))!\e"
	"\0\s[0]Don't forget you can use the Hook Current Time API in the dev palette to artificially change the time!\w8\w8 It's great for testing time and date based dialogues.\e"
	
	//This will call the example pool I've set up below. The second argument, %(username != ''), means that this pool will be available so long as the username is not blank. You can put any if check in there! For example: %(month == 2) would make a pool only available in February, while %(nowmode == 'Ultimate Form') would make a pool only available while the nowmode variable is set to "Ultimate Form".
	parallel Pool("Pool_Example","%(username != '')")
	
	//User Environment Ifs
	//---Timeslots---
	parallel Pool("Pool_timeslot_earlymorning","%(timeslot == 'earlymorning')")
	parallel Pool("Pool_timeslot_morning","%(timeslot == 'morning')")
	parallel Pool("Pool_timeslot_lunch","%(timeslot == 'lunch')")
	parallel Pool("Pool_timeslot_afternoon","%(timeslot == 'afternoon')")
	parallel Pool("Pool_timeslot_evening","%(timeslot == 'evening')")
	parallel Pool("Pool_timeslot_latenight","%(timeslot == 'latenight')")
	parallel Pool("Pool_timeslot_midnight","%(timeslot == 'midnight')")

	parallel Pool("Pool_wd_Sun","%(wd == 'Sun')")
	parallel Pool("Pool_wd_Mon","%(wd == 'Mon')")
	parallel Pool("Pool_wd_Tue","%(wd == 'Tue')")
	parallel Pool("Pool_wd_Wed","%(wd == 'Wed')")
	parallel Pool("Pool_wd_Thu","%(wd == 'Thu')")
	parallel Pool("Pool_wd_Fri","%(wd == 'Fri')")
	parallel Pool("Pool_wd_Sat","%(wd == 'Sat')")

	parallel Pool("Pool_startmonth","%(day < 5)")
	parallel Pool("Pool_midmonth","%(day > 13 && day < 17)")
	parallel Pool("Pool_endmonth","%(day > 26)")

	parallel Pool("Pool_month_Jan","%(month == 1)")
	parallel Pool("Pool_month_Feb","%(month == 2)")
	parallel Pool("Pool_month_Mar","%(month == 3)")
	parallel Pool("Pool_month_Apr","%(month == 4)")
	parallel Pool("Pool_month_May","%(month == 5)")
	parallel Pool("Pool_month_Jun","%(month == 6)")
	parallel Pool("Pool_month_Jul","%(month == 7)")
	parallel Pool("Pool_month_Aug","%(month == 8)")
	parallel Pool("Pool_month_Sep","%(month == 9)")
	parallel Pool("Pool_month_Oct","%(month == 10)")
	parallel Pool("Pool_month_Nov","%(month == 11)")
	parallel Pool("Pool_month_Dec","%(month == 12)")

	parallel Pool("Pool_season_Spring","%(season == 'Spring')")
	parallel Pool("Pool_season_Summer","%(season == 'Summer')")
	parallel Pool("Pool_season_Autumn","%(season == 'Autumn')")
	parallel Pool("Pool_season_Winter","%(season == 'Winter')")
	
	//---Noticing and commenting on other ghosts---
	//Remember that you have to check for the sakura name of another ghost, not the ghost name.
	if "Girl" _in_ ghostexlist
	{
		"\0\s[0]Another template ghost!\w8\w8 Hi Girl!\e"
	}
}


//-----------Pools-----------

//Example of a pool. You can name pools whatever you like. I always start them with Pool_ so that it's clear what they are. They MUST have : array after the function name, or they won't work. I also recommend putting a comment with what if check activates this pool, so it's easy to remember later.
Pool_Example : array //username != ""
{
	"\0\s[0]This is the first dialogue from the pool!\w8\w8 Your username isn't blank,\w4 so all these dialogues are available with equal probability!\e"
	"\0\s[0]This is the second dialogue from the pool!\w8\w8 You wouldn't see these nearly so often if they were just in a plain if check.\e"
	"\0\s[0]This is the third dialogue from the pool!\w8\w8 Putting dialogues in a pool like this means that nonoverlap can affect them properly, so long as nothing else interferes!\e"
	"\0\s[0]This is the fourth dialogue from the pool!\w8\w8 You could nest another pool inside this pool,\w4 and all the dialogues in there would also display with equal probabilities!\e"
	"\0\s[0]This is the fifth dialogue from the pool!\w8\w8 Pools can be placed anywhere,\w4 not just RandomTalk!\e"
}

//---Timeslots---
Pool_timeslot_earlymorning : array //timeslot == 'earlymorning' (5am - 8am)
{
	
	//These are sub-pools, I've put them just below this one. Any dialogues you put in them will also get the same probabilities as all other dialogue.
	parallel Pool("Pool_timeslot_earlymorning_uplate","%(runtime[0] >= 3)") //Been open for 3 hours or more, so the user has probably been up all night
	parallel Pool("Pool_timeslot_earlymorning_upearly","%(runtime[0] < 3)") //Probably just got up
}

Pool_timeslot_earlymorning_uplate : array //runtime[0] >= 3 (Been open for 3 hours or more, so the user has probably been up all night)
{
	
}

Pool_timeslot_earlymorning_upearly : array //runtime[0] < 3 (Probably just got up)
{
	
}

Pool_timeslot_morning : array //timeslot == 'morning' (9am - 11am)
{
	
}

Pool_timeslot_lunch : array //timeslot == 'lunch' (12pm - 2pm)
{
	
}

Pool_timeslot_afternoon : array //timeslot == 'afternoon' (3pm - 5pm)
{
	
}

Pool_timeslot_evening : array //timeslot == 'evening' (6pm - 8pm)
{
	
}

Pool_timeslot_latenight : array //timeslot == 'latenight' (9pm - 12am)
{
	
}

Pool_timeslot_midnight : array //timeslot == 'midnight' (1am - 4am)
{
	
}


//---Days of the week---

Pool_wd_Sun : array //wd == "Sun"
{
	
}

Pool_wd_Mon : array //wd == "Mon"
{
	
}

Pool_wd_Tue : array //wd == "Tue"
{
	
}

Pool_wd_Wed : array //wd == "Wed"
{
	
}

Pool_wd_Thu : array //wd == "Thu"
{
	
}

Pool_wd_Fri : array //wd == "Fri"
{
	
}

Pool_wd_Sat : array //wd == "Sat"
{
	
}


//---Days in the month---
Pool_startmonth : array //day < 5 (start of the month)
{
	
}

Pool_midmonth : array //day > 13 && day < 17 (middle of the month)
{
	
}

Pool_endmonth : array //day > 26 (end of the month)
{
	
}


//---Months--- (Northern hemisphere/Southern hemisphere)
Pool_month_Jan : array //month == 1
{
	
}

Pool_month_Feb : array //month == 2
{
	
}

Pool_month_Mar : array //month == 3 (Spring start/Autumn start)
{
	
}

Pool_month_Apr : array //month == 4
{
	
}

Pool_month_May : array //month == 5
{
	
}

Pool_month_Jun : array //month == 6 (Summer start/Winter start)
{
	
}

Pool_month_Jul : array //month == 7
{
	
}

Pool_month_Aug : array //month == 8
{
	
}

Pool_month_Sep : array //month == 9 (Autumn start/Spring start)
{
	
}

Pool_month_Oct : array //month == 10
{
	
}

Pool_month_Nov : array //month == 11
{
	
}

Pool_month_Dec : array //month == 12 (Winter start/Summer start)
{
	
}


//---Seasons---
Pool_season_Spring : array //season == 'Spring'
{
	
}

Pool_season_Summer : array //season == 'Summer'
{
	
}

Pool_season_Autumn : array //season == 'Autumn'
{
	
}

Pool_season_Winter : array //season == 'Winter'
{
	
}

//-----------Chains-----------

//Example of a chain. The dialogues will play in order each time the ghost talks until it reaches chain=end.
achain
{{CHAIN
	"\0\s[0]Here's another part of the chain!\e"
	"\0\s[0]Here's a third part of the chain!\e"
	"\0\s[0]Here's a fourth part of the chain!\e"
	"\0\s[0]Here's the end of a chain!\e:chain=end"
}}CHAIN


//-----------Timekeeping systems and related dialogue-----------

OnMinuteChange
{
	if hour == 0 && minute == 0; AutoUpdates[1] = 0 //Resetting auto updates
	
	if minute == 0 && HourNotifs == "On" //Top of the hour notifications
	{
		if hour == 0
		{
			if day == 1 && month == 1
			{
				"\0\s[0]Happy new year!\e"
			}
			else
			{
				"\0\s[0]It's midnight.\e"
			}
		}
		elseif hour == 12
		{
			"\0\s[0]It's noon.\e"
		}
		else
		{
			"\0\s[0]It's %(hour12) o'clock.\e"
		}
	}
	elseif ARRAYSIZE(offscreen) > 0 //If the ghost is off the screen, it will run the off screen dialogue every minute
 	{
 		OffscreenTalk
	}
	--
	if AutoUpdates[0] == "On" && AutoUpdates[1] == 0 //Once a day the ghost will check for updates if the user has auto updates on
	{
		AutoUpdates[1] = 1
		"\![updatebymyself,checkonly]"
	}
	
}

OnSecondChange
{
	if runtime[2] >= 59
	{
		runtime[2] = 0
		runtime[1]++
		if runtime[1] >= 59
		{
			runtime[1] = 0
			runtime[0]++
			totalhours++
		}
	}
	else
	{
		runtime[2]++
	}
	if reference2 == 1 //This is for if your Sakura and Kero are overlapping. \4 will move the speaking character away from the other character.
	{
		"\0\s[0]Me and %(keroname) are overlapping.\4\e"
	}
	elseif ARRAYSIZE(waitingcommuS) > 0 && second % 5 == 0 //Every 5 seconds, check if the balloon is closed and a communication is waiting, and if so trigger a response
	{
		_b = BalloonCheck
		if _b == 0; WaitingCommu
	}
}

OnOffscreen
{
	//I've tinkered a lot with this function to get it working for multiple characters. If you need more than 2, just copy the format below very carefully, and make sure you increment the numbers. It's not perfect; if you have multiple characters off screen at once it might pick the wrong dialogues, but you can add more elseifs to handle those cases if you really want them.
	offscreen = TOSTR(reference0)
	CVSTR(reference0)
	CVSTR(reference1)
	
	if "0" _in_ reference0 //Checks if the sakura was moved off screen
	{
		OffscreenTalk("0")
	}
	elseif "1" _in_ reference0 //Checks if the kero was moved off screen
	{
		OffscreenTalk("1")
	}
	
	//Coming back on screen
	elseif "0" _in_ reference1 //Checks if the sakura is no longer off screen
	{
		EndOffscreenTalk("0")
	}
	elseif "1" _in_ reference1 //Checks if the kero is no longer off screen
	{
		EndOffscreenTalk("1")
	}
}

OffscreenTalk //Off the screen dialogue. Ctrl Shift F12 will bring characters back onto the screen. _argv[0] here contains the number of the character who is off screen, 0 for sakura, 1 for kero, 2 and up for extra chars
{
	if _argv[0] == "0" //If the sakura is off screen
	{
		"\0\s[0]I'm off the screen.\w8\w8 You can press Ctrl Shift F12 to bring me back.\e"
	}
	elseif _argv[0] == "1" //If the kero is off screen
	{
		"\0\s[0]The kero is off the screen.\w8\w8 You can press Ctrl Shift F12 to bring it back.\e"
	}
}

EndOffscreenTalk //Being brought back on the screen. _argv[0] here contains the number of the character who was brought back on screen, 0 for sakura, 1 for kero, 2 and up for extra chars
{
	if _argv[0] == "0" //If the sakura was brought back on screen
	{
		"\0\s[0]I'm back!\e"
	}
	elseif _argv[0] == "1" //If the kero was brought back on screen
	{
		"\0\s[0]The kero is back!\e"
	}
}

OnSurfaceRestore //OnSurfaceRestore happens around 30 seconds after the ghost's last dialogue. reference0 here stores the number of the previous surface, so you can have them comment when they change back if you like.
{
	"\1\s[-1]\0\s[0]\e"
}